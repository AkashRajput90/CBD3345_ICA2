name: Test, Package, and Deploy

on:
  push:
    branches:
      - main # Adjust the branch name as needed

jobs:
  test:
    runs-on: self-hosted
    strategy:
      matrix:
        python-version: ["3.8"]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install Flask matplotlib numpy pytest


      - name: Test with pytest
        run: |
          pytest test_app.py --doctest-modules --junitxml=tests/test-results-${{ matrix.python-version }}.xml > tests/log1.txt 
          pytest test_app.py  > tests/log.txt

      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: tests/
        if: ${{ always() }}

  build-and-push-image:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  integration-test:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    services:
      my-container:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        ports:
          - 5000:5000
    steps:
      - name: Wait for the service to be ready
        run: |
          echo "Waiting for the service to be ready..."
          while ! nc -z localhost 5000; do sleep 1; done
          echo "Service is ready!"

      - name: Run integration tests
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{"xmin": -2, "xmax": 2, "ymin": -2, "ymax": 2}' http://localhost:5000/plot
